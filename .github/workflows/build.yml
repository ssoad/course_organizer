name: Build Course Organizer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        python-version: ['3.10']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install poppler
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
        # Find poppler installation
        echo "Checking poppler location..."
        which pdftocairo
        which pdfinfo
        ls -la $(brew --prefix poppler)/bin
        
        # Save actual poppler directory for later use
        echo "POPPLER_PATH=$(brew --prefix poppler)" >> $GITHUB_ENV

    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y poppler-utils
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
        # Download poppler with error checking
        echo "Downloading poppler for Windows..."
        curl -L -o poppler.zip "https://github.com/oschwartz10612/poppler-windows/releases/download/v23.11.0/Release-23.11.0.zip"
        
        # Verify download
        dir poppler.zip
        
        # Extract with verbose output
        echo "Extracting poppler..."
        7z x poppler.zip -opopplerbin -y
        
        # Verify extraction
        dir popplerbin

    - name: Set Poppler Path (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        echo "POPPLER_PATH=$GITHUB_WORKSPACE/popplerbin" >> $GITHUB_ENV
        ls -la $GITHUB_WORKSPACE/popplerbin  # Debug output

    - name: Set Poppler Path (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: echo "POPPLER_PATH=/usr" >> $GITHUB_ENV

    - name: Debug Environment Variables
      run: |
        echo "Current directory: $(pwd)"
        echo "POPPLER_PATH: $POPPLER_PATH"
        ls -la  # List directory contents

    - name: Build Application
      run: |
        python -m PyInstaller build.spec

    # Create platform-specific ZIP files
    - name: Create ZIP (macOS)
      if: runner.os == 'macOS'
      run: |
        cd dist
        zip -r ../CourseOrganizer-macOS.zip "Course Organizer.app"

    - name: Create ZIP (Windows)
      if: runner.os == 'Windows'
      run: |
        cd dist
        7z a ../CourseOrganizer-Windows.zip "Course Organizer"

    - name: Create ZIP (Linux)
      if: runner.os == 'Linux'
      run: |
        cd dist
        # List directory contents to debug
        echo "Contents of dist directory:"
        ls -la
        # Use wildcard to match the actual directory name
        zip -r ../CourseOrganizer-Linux.zip ./*

    # Upload artifacts (the ZIP files we just created)
    - name: Upload Build Artifact
      uses: actions/upload-artifact@master
      with:
        name: CourseOrganizer-${{ runner.os }}
        path: CourseOrganizer-${{ runner.os }}.zip
        if-no-files-found: error
        retention-days: 5

    # Upload to GitHub release (only when a release is created)
    - name: Upload Release Asset
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: CourseOrganizer-${{ runner.os }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
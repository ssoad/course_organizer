name: Build Course Organizer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        python-version: ['3.10']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install poppler
        brew install create-dmg
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
        # Install PyInstaller with specific options for universal builds
        pip install pyinstaller==6.0.0

        # Save actual poppler directory for later use
        echo "POPPLER_PATH=$(brew --prefix poppler)" >> $GITHUB_ENV
        
        # Set architecture flags for universal binary
        echo "ARCHFLAGS='-arch x86_64 -arch arm64'" >> $GITHUB_ENV

    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y poppler-utils
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
        # Download poppler with error checking
        echo "Downloading poppler for Windows..."
        curl -L -o poppler.zip "https://github.com/oschwartz10612/poppler-windows/releases/download/v24.08.0-0/Release-24.08.0-0.zip"
        
        # Verify download
        dir poppler.zip
        
        # Extract with verbose output
        echo "Extracting poppler..."
        7z x poppler.zip -opopplerbin -y
        
        # Verify extraction
        dir popplerbin

    - name: Set Poppler Path (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        echo "POPPLER_PATH=$GITHUB_WORKSPACE/popplerbin" >> $GITHUB_ENV
        ls -la $GITHUB_WORKSPACE/popplerbin  # Debug output

    - name: Set Poppler Path (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: echo "POPPLER_PATH=/usr" >> $GITHUB_ENV

    - name: Debug Environment Variables (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        echo "Current directory: $(pwd)"
        echo "POPPLER_PATH: $POPPLER_PATH"
        ls -la  # List directory contents

    - name: Debug Environment Variables (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "Current directory: $pwd"
        Write-Host "POPPLER_PATH: $env:POPPLER_PATH"
        Get-ChildItem  # List directory contents
        
        # Verify poppler directory exists
        if (Test-Path $env:POPPLER_PATH) {
          Write-Host "Poppler directory found"
          Get-ChildItem $env:POPPLER_PATH
        } else {
          Write-Host "ERROR: Poppler directory not found at $env:POPPLER_PATH"
        }

    - name: Build Application
      run: |
        python -m PyInstaller build.spec

    - name: Build macOS Application with DMG
      if: runner.os == 'macOS'
      run: |
        # Make build script executable
        chmod +x build.sh
    
        # Now run PyInstaller with the modified spec file
        python -m PyInstaller build.spec
    
        # Run the build script for DMG creation
        ./build.sh
    
        # Debug output
        ls -la dist/
        ls -la .
        file dist/*.app/Contents/MacOS/* || true

    # Create platform-specific packages
    - name: Create ZIP (macOS)
      if: runner.os == 'macOS'
      run: |
        # Debug - check what's actually in the dist directory
        echo "Contents of dist directory:"
        ls -la dist/
        
        # Look for any .app files
        APP_FILE=$(find dist -name "*.app" -type d | head -n 1)
        
        if [ -n "$APP_FILE" ]; then
          echo "Found app bundle: $APP_FILE"
          # Create ZIP with the actual app bundle
          cd dist
          zip -r ../CourseOrganizer-macOS.zip *.app
        else {
          echo "Error: No .app bundle found in dist directory"
          exit 1
        fi

    - name: Create ZIP (Windows)
      if: runner.os == 'Windows'
      run: |
        # Debug - check what's actually in the dist directory
        Write-Host "Contents of dist directory:"
        Get-ChildItem -Path dist -Force
        
        # Create ZIP file with wildcard matching
        cd dist
        # Use wildcards to match whatever directory name is actually present
        7z a ../CourseOrganizer-Windows.zip *

    - name: Create ZIP (Linux)
      if: runner.os == 'Linux'
      run: |
        cd dist
        # List directory contents to debug
        echo "Contents of dist directory:"
        ls -la
        # Use wildcard to match the actual directory name
        zip -r ../CourseOrganizer-Linux.zip ./*

    # Upload artifacts
    - name: Upload Build Artifact (Windows/Linux)
      if: runner.os != 'macOS'
      uses: actions/upload-artifact@master
      with:
        name: CourseOrganizer-${{ runner.os }}
        path: CourseOrganizer-${{ runner.os }}.zip
        if-no-files-found: error
        retention-days: 5

    - name: Upload Build Artifact (macOS)
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@master  # Updated to v3 for better stability
      with:
        name: CourseOrganizer-macOS-Universal
        path: |
          CourseOrganizer-macOS.zip
          ./Course*.dmg
          ./dist/Course*.dmg
        if-no-files-found: warn
        retention-days: 5

    # Upload to GitHub release (only when a release is created)
    - name: Upload Release Asset (Windows/Linux)
      if: github.event_name == 'release' && runner.os != 'macOS'
      uses: softprops/action-gh-release@v1
      with:
        files: CourseOrganizer-${{ runner.os }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset (macOS)
      if: github.event_name == 'release' && runner.os == 'macOS'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          CourseOrganizer-macOS.zip
          Course Tracker.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}